package info.simplecloud.core.decoding;

import info.simplecloud.core.ScimUser;
import info.simplecloud.core.coding.decode.JsonDecoder;
import info.simplecloud.core.execeptions.FailedToSetValue;
import info.simplecloud.core.execeptions.InvalidUser;
import info.simplecloud.core.execeptions.UnhandledAttributeType;
import info.simplecloud.core.execeptions.UnknownType;
import info.simplecloud.core.types.PluralType;

import org.apache.xmlbeans.impl.util.Base64;
import org.junit.Assert;
import org.junit.Test;

public class JsonDecoderTest {

    @Test(expected = InvalidUser.class)
    public void decodeInvalidUser() throws InvalidUser, UnhandledAttributeType, FailedToSetValue, UnknownType, InstantiationException, IllegalAccessException {
        String user = "";
        ScimUser scimUser = new ScimUser();
        JsonDecoder decoder = new JsonDecoder();

        decoder.decode(user, scimUser);
    }
    
    @Test
    public void decode() throws InvalidUser, UnhandledAttributeType, FailedToSetValue, UnknownType, InstantiationException, IllegalAccessException {
        String user = "ewoJICAgICJzY2hlbWFzIjogWyJ1cm46c2NpbTpzY2hlbWFzOmNvcmU6MS4wIl0sCgkgICAgImlkIjogIjAwNUQwMDAwMDAxQXoxdSIsCgkgICAgImV4dGVybmFsSWQiOiAiNzAxOTg0IiwKCSAgICAidXNlck5hbWUiOiAiYmplbnNlbkBleGFtcGxlLmNvbSIsCgkgICAgIm5hbWUiOiB7CgkgICAgCSJmb3JtYXR0ZWQiOiAiTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJIiwKCSAgICAgICAgImZhbWlseU5hbWUiOiAiSmVuc2VuIiwKCSAgICAgICAgImdpdmVuTmFtZSI6ICJCYXJiYXJhIiwKCSAgICAgICAgIm1pZGRsZU5hbWUiOiAiSmFuZSIsCgkgICAgICAgICJob25vcmlmaWNQcmVmaXgiOiAiTXMuIiwKCSAgICAgICAgImhvbm9yaWZpY1N1ZmZpeCI6ICJJSUkiCgkgICAgfSwKCSAgICAiZGlzcGxheU5hbWUiOiAiQmFicyBKZW5zZW4iLAoJICAgICJuaWNrTmFtZSI6ICJCYWJzIiwKCSAgICAicHJvZmlsZVVybCI6ICJodHRwczovL2xvZ2luLmV4YW1wbGUuY29tL2JqZW5zZW4iLAoJICAgICJlbWFpbHMiOiBbCgkgICAgICAgIHsKCSAgICAgICAgICAidmFsdWUiOiAiYmplbnNlbkBleGFtcGxlLmNvbSIsCgkgICAgICAgICAgInR5cGUiOiAid29yayIsCgkgICAgICAgICAgInByaW1hcnkiOiB0cnVlCgkgICAgICAgIH0sCgkgICAgICAgIHsKCSAgICAgICAgICAidmFsdWUiOiAiYmFic0BqZW5zZW4ub3JnIiwKCSAgICAgICAgICAidHlwZSI6ICJob21lIgoJICAgICAgICB9CgkgICAgXSwKCSAgICAiYWRkcmVzc2VzIjogWwoJICAgICAgICB7CgkgICAgICAgICAgInR5cGUiOiAid29yayIsCgkgICAgICAgICAgInN0cmVldEFkZHJlc3MiOiAiMTAwIFVuaXZlcnNhbCBDaXR5IFBsYXphIiwKCSAgICAgICAgICAibG9jYWxpdHkiOiAiSG9sbHl3b29kIiwKCSAgICAgICAgICAicmVnaW9uIjogIkNBIiwKCSAgICAgICAgICAicG9zdGFsQ29kZSI6ICI5MTYwOCIsCgkgICAgICAgICAgImNvdW50cnkiOiAiVVNBIiwKCSAgICAgICAgICAiZm9ybWF0dGVkIjogIjEwMCBVbml2ZXJzYWwgQ2l0eSBQbGF6YVxuSG9sbHl3b29kLCBDQSA5MTYwOCBVU0EiLAoJICAgICAgICAgICJwcmltYXJ5IjogdHJ1ZQoJICAgICAgICB9LAoJICAgICAgICB7CgkgICAgICAgICAgInR5cGUiOiAiaG9tZSIsCgkgICAgICAgICAgInN0cmVldEFkZHJlc3MiOiAiNDU2IEhvbGx5d29vZCBCbHZkIiwKCSAgICAgICAgICAibG9jYWxpdHkiOiAiSG9sbHl3b29kIiwKCSAgICAgICAgICAicmVnaW9uIjogIkNBIiwKCSAgICAgICAgICAicG9zdGFsQ29kZSI6ICI5MTYwOCIsCgkgICAgICAgICAgImNvdW50cnkiOiAiVVNBIiwKCSAgICAgICAgICAiZm9ybWF0dGVkIjogIjQ1NiBIb2xseXdvb2QgQmx2ZFxuSG9sbHl3b29kLCBDQSA5MTYwOCBVU0EiCgkgICAgICAgIH0KCSAgICBdLAoJICAgICJwaG9uZU51bWJlcnMiOiBbCgkgICAgICAgIHsKCSAgICAgICAgICAidmFsdWUiOiAiODAwLTg2NC04Mzc3IiwKCSAgICAgICAgICAidHlwZSI6ICJ3b3JrIgoJICAgICAgICB9LAoJICAgICAgICB7CgkgICAgICAgICAgInZhbHVlIjogIjgxOC0xMjMtNDU2NyIsCgkgICAgICAgICAgInR5cGUiOiAibW9iaWxlIgoJICAgICAgICB9CgkgICAgXSwKCSAgICAiaW1zIjogWwoJICAgICAgICB7CgkgICAgICAgICAgInZhbHVlIjogInNvbWVhaW1oYW5kbGUiLAoJICAgICAgICAgICJ0eXBlIjogImFpbSIKCSAgICAgICAgfQoJICAgIF0sCgkgICAgInBob3RvcyI6IFsKCSAgICAgICAgewoJICAgICAgICAgICJ2YWx1ZSI6ICJodHRwczovL3Bob3Rvcy5leGFtcGxlLmNvbS9wcm9maWxlcGhvdG8vNzI5MzAwMDAwMDBDY25lL0YiLAoJICAgICAgICAgICJ0eXBlIjogInBob3RvIgoJICAgICAgICB9LAoJICAgICAgICB7CgkgICAgICAgICAgInZhbHVlIjogImh0dHBzOi8vcGhvdG9zLmV4YW1wbGUuY29tL3Byb2ZpbGVwaG90by83MjkzMDAwMDAwMENjbmUvVCIsCgkgICAgICAgICAgInR5cGUiOiAidGh1bWJuYWlsIgoJICAgICAgICB9CgkgICAgXSwKCSAgICAiZW1wbG95ZWVOdW1iZXIiOiAiNzAxOTg0IiwKCSAgICAidXNlclR5cGUiOiAiRW1wbG95ZWUiLAoJICAgICJ0aXRsZSI6ICJUb3VyIEd1aWRlIiwKCSAgICAibWFuYWdlciI6ICJNYW5keSBQZXBwZXJpZGdlIiwKCSAgICAicHJlZmVycmVkTGFuZ3VhZ2UiOiAiZW5fVVMiLAoJICAgICJsb2NhbGUiOiAiZW5fVVMiLAoJICAgICJ1dGNPZmZzZXQiOiAtOCwKCSAgICAiY29zdENlbnRlciI6ICI0MTMwIiwKCSAgICAib3JnYW5pemF0aW9uIjogIlVuaXZlcnNhbCBTdHVkaW9zIiwKCSAgICAiZGl2aXNpb24iOiAiVGhlbWUgUGFyayIsCgkgICAgImRlcGFydG1lbnQiOiAiVG91ciBPcGVyYXRpb25zIiwKCSAgICAiZ3JvdXBzIjogWwoJICAgICAgICB7CgkgICAgICAgICAgInZhbHVlIjogIlRvdXIgR3VpZGVzIiwKCSAgICAgICAgICAicHJpbWFyeSI6IHRydWUKCSAgICAgICAgfSwKCSAgICAgICAgewoJICAgICAgICAgICJ2YWx1ZSI6ICJFbXBsb3llZXMiLAoJICAgICAgICB9LAoJICAgICAgICB7CgkgICAgICAgICAgInZhbHVlIjogIlVTIEVtcGxveWVlcyIsCgkgICAgICAgIH0KCSAgICBdLAoJICAgICJtZXRhIjogewoJICAgICAgICAiY3JlYXRlZCI6ICIyMDEwLTAxLTIzVDA0OjU2OjIyWiIsCgkgICAgICAgICJsYXN0TW9kaWZpZWQiOiAiMjAxMS0wNS0xM1QwNDo0MjozNFoiCgkgICAgfQoJfQ==";
        user = new String(Base64.decode(user.getBytes()));
        ScimUser scimUser = new ScimUser();
        JsonDecoder decoder = new JsonDecoder();

        decoder.decode(user, scimUser);
        
        Assert.assertEquals("005D0000001Az1u", scimUser.getId());
        Assert.assertEquals("bjensen@example.com", scimUser.getUserName());
        Assert.assertNotNull(scimUser.getName());
        Assert.assertEquals("Ms. Barbara J Jensen III", scimUser.getName().getFormatted());
        Assert.assertEquals("Barbara", scimUser.getName().getGivenName());
        Assert.assertNotNull(scimUser.getEmails());
        Assert.assertEquals(2, scimUser.getEmails().size());
        Assert.assertTrue(scimUser.getEmails().contains(new PluralType<String>("bjensen@example.com", "work", true)));
    }
}
